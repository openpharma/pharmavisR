#' geom_text()
visr_plot_risk <- function(x, timeby = 10){
df <- visr_summary_surv(x, timeby) %>%
dplyr::mutate(strata_id = group_indices(., strata) - 1)
return(df)
}
library(survival)
library(magrittr)
#' library(dplyr)
#' library(ggplot2)
#' library(broom)
#' fit <- survival::survfit(Surv(time, status) ~ sex, data = lung)
#' visr_plot_risk(fit, 50) %>%
#' ggplot(aes(x = time, y = strata_id, label = n.risk, group= strata)) +
#' geom_text()
library(survival)
library(magrittr)
library(dplyr)
library(ggplot2)
library(broom)
fit <- survival::survfit(Surv(time, status) ~ sex, data = lung)
visr_plot_risk(fit, 50) %>%
ggplot(aes(x = time, y = strata_id, label = n.risk, group= strata)) +
geom_text()
devtools::document()
usethis::use_package("ggplot2")
usethis::use_package("magrittr")
usethis::use_package("survial")
usethis::use_package("survival")
usethis::use_vignette("plot_survival")
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_badge("experimental")
usethis::use_lifecycle_badge("Experimental")
pkgdown::build_site()
library(visR)
library(survival)
library(magrittr)
library(dplyr)
library(ggplot2)
library(broom)
library(patchwork)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
a <- fit %>%
tidy() %>%
visr_plot_surv()
a
visr_plot_surv <- function(x) {
df <- x
gg <-
df %>%
ggplot2::ggplot(aes(time, estimate, group = strata)) +
ggplot2::geom_line() +
ggplot2::geom_linerange(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
ggplot2::geom_point(
data = df %>% dplyr::filter(n.censor > 0),
aes(time, estimate),
alpha = 0.5
) +
ggtitle("Update the title", subtitle = "Fill out the population")
return(gg)
}
library(survival)
library(magrittr)
library(dplyr)
library(ggplot2)
library(broom)
library(patchwork)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
a <- fit %>%
tidy() %>%
visr_plot_surv()
a
a + title("main")
ggpub(a) + title("main")
ggpubr(a) + title("main")
ggplot2::ggproto(a)
ggplot_build(a)
a + title("main")
ggplot_build(a)
ggplot_build(a + title("main"))
fit %>%
tidy() %>%
visr_plot_surv()
fit %>%
tidy() %>%
visr_plot_surv() +
title("main")
visr_plot_surv <- function(x) {
df <- x
gg <-
df %>%
ggplot2::ggplot(aes(time, estimate, group = strata)) +
ggplot2::geom_line() +
ggplot2::geom_linerange(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
ggplot2::geom_point(
data = df %>% dplyr::filter(n.censor > 0),
aes(time, estimate),
alpha = 0.5
) +
ggtitle("Update the title", subtitle = "Fill out the population")
gg
}
library(survival)
library(magrittr)
library(dplyr)
library(ggplot2)
library(broom)
library(patchwork)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
fit %>%
tidy() %>%
visr_plot_surv()
a <- fit %>%
tidy() %>%
visr_plot_surv()
a
a + title("main")
a + ggplot2::ggtitle("main")
visr_plot_surv <- function(x) {
df <- x
gg <-
df %>%
ggplot2::ggplot(aes(time, estimate, group = strata)) +
ggplot2::geom_line() +
ggplot2::geom_linerange(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
ggplot2::geom_point(
data = df %>% dplyr::filter(n.censor > 0),
aes(time, estimate),
alpha = 0.5
) +
ggtitle("Update the title", subtitle = "Fill out the population")
return(gg)
}
library(survival)
library(magrittr)
library(dplyr)
library(ggplot2)
library(broom)
library(patchwork)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
a <- fit %>%
tidy() %>%
visr_plot_surv()
a + ggplot2::ggtitle("main")
a + ggtitle("main") +
theme_classic()
visr_plot_surv <- function(x) {
df <- x
gg <-
df %>%
ggplot2::ggplot(aes(time, estimate, group = strata)) +
ggplot2::geom_line() +
ggplot2::geom_linerange(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
ggplot2::geom_point(
data = df %>% dplyr::filter(n.censor > 0),
aes(time, estimate),
alpha = 0.5
) +
ggtitle("Update the title", subtitle = "Fill out the population")
return(gg)
}
library(survival)
library(magrittr)
library(dplyr)
library(ggplot2)
library(broom)
library(patchwork)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
a <- fit %>%
tidy() %>%
visr_plot_surv()
a + ggtitle("main") +
theme_classic()
a + ggtitle("Change the title") +
xlab("Days from index measurement") +
ylab("Survival")
theme_classic()
a + ggtitle("Change the title") +
xlab("Days from index measurement") +
ylab("Survival") +
theme_classic()
install.packages("ggrepel")
devtools::document()
pkgdown::build_site()
usethis::use_package("patchwork")
usethis::use_package("ggrepel")
devtools::document()
devtools::document()
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
devtools::document()
library(survival)
library(magrittr)
library(dplyr)
library(ggplot2)
library(broom)
library(patchwork)
fit <- survfit(Surv(time, status) ~ sex, data = lung)
visr_plot_risk <- function(x, timeby = 10){
gg <- visr_summary_surv(x, timeby) %>%
dplyr::mutate(strata_id = group_indices(., strata) - 1) %>%
ggplot2::ggplot(aes(x = time, y = strata, label = n.risk)) +
ggplot2::geom_text() +
ggplot2::theme_minimal() +
ggplot2::theme_set(
axis.title = element_blank(),
axis.x.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
return(gg)
}
visr_plot_risk(fit, 500)
visr_plot_risk <- function(x, timeby = 10){
gg <- visr_summary_surv(x, timeby) %>%
dplyr::mutate(strata_id = group_indices(., strata) - 1) %>%
ggplot2::ggplot(aes(x = time, y = strata, label = n.risk)) +
ggplot2::geom_text() +
ggplot2::theme_set(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
return(gg)
}
visr_plot_risk(fit, 500)
visr_plot_risk <- function(x, timeby = 10){
gg <- visr_summary_surv(x, timeby) %>%
dplyr::mutate(strata_id = group_indices(., strata) - 1) %>%
ggplot2::ggplot(aes(x = time, y = strata, label = n.risk)) +
ggplot2::geom_text() +
ggplot2::theme(
axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
return(gg)
}
visr_plot_risk(fit, 500)
visr_plot_risk <- function(x, timeby = 10){
gg <- visr_summary_surv(x, timeby) %>%
dplyr::mutate(strata_id = group_indices(., strata) - 1) %>%
ggplot2::ggplot(aes(x = time, y = strata, label = n.risk)) +
ggplot2::geom_text() +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.title = element_blank(),
axis.x.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
return(gg)
}
visr_plot_risk(fit, 500)
visr_plot_risk <- function(x, timeby = 10){
gg <- visr_summary_surv(x, timeby) %>%
dplyr::mutate(strata_id = group_indices(., strata) - 1) %>%
ggplot2::ggplot(aes(x = time, y = strata, label = n.risk)) +
ggplot2::geom_text() +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
return(gg)
}
visr_plot_risk(fit, 500)
visr_plot_risk <- function(x, timeby = 10){
gg <- visr_summary_surv(x, timeby) %>%
dplyr::mutate(strata_id = group_indices(., strata) - 1) %>%
ggplot2::ggplot(aes(x = time, y = strata, label = n.risk)) +
ggplot2::geom_text() +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
return(gg)
}
visr_plot_risk(fit, 500)
visr_plot_risk <- function(x, timeby = 10){
gg <- visr_summary_surv(x, timeby) %>%
dplyr::mutate(strata_id = group_indices(., strata) - 1) %>%
ggplot2::ggplot(aes(x = time, y = strata, label = n.risk)) +
ggplot2::geom_text() +
ggplot2::theme_minimal() +
ggplot2::theme(
axis.title = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank()
)
return(gg)
}
visr_plot_risk(fit, 500)
devtools::document()
pkgdown::build_site()
pkgdown::build_site()
library(usethis)
usethis::use_r(tidy_rbest)
usethis::use_r("tidy_rbest")
library(RBesT)
library(tidyverse)
library(ggplot2)
library(bayesplot)
# Default settings for bayesplot
color_scheme_set("blue")
theme_set(theme_default(base_size=12))
# Load example gMAP object
example(crohn)
print(map_crohn)
str(map_crohn)
forest_plot(map_crohn)
###
# adjust the base font size
theme_set(theme_default(base_size=16))
forest_plot(map_crohn, model="both", est="MAP", size=1) + legend_move("right") +
labs(title="Forest plot", subtitle="Results of Meta-Analytic-Predictive (MAP) analysis",
caption="Plot shows point estimates (posterior medians) with 95% intervals")
### what is the response to be -125?
usethis::use_package("RBesT")
#' Forest Plot
#'
#' Creates a forest plot for \code{\link{gMAP}} analysis objects.
#'
#' @param x \code{\link{gMAP}} object.
#' @param prob confidence interval width and probability mass of credible intervals.
#' @param est can be set to one of \code{both} (default), \code{MAP}, \code{Mean} or \code{none}. Controls which model estimates are to be included.
#' @param model controls which estimates are displayed per study. Either \code{stratified} (default), \code{both} or \code{meta}.
#' @param point_est shown point estimate. Either \code{median} (default) or \code{mean}.
#' @param size controls point and linesize.
#' @param alpha transparency of reference line. Setting \code{alpha=0}
#' suppresses the reference line.
#'
#' @details The function creates a forest plot suitable for
#' \code{\link{gMAP}} analyses. Note that the Meta-Analytic-Predictive
#' prior is included by default in the plot as opposed to only showing
#' the estimated model mean. See the examples below to obtain standard
#' forest plots.
#'
#' Also note that the plot internally flips the x and
#' y-axis. Therefore, if you want to manipulate the x-axis, you have
#' to give commands affecting the y-axis (see examples).
#'
#' @template plot-help
#'
#' @return The function returns a \pkg{ggplot2} plot object.
#'
#' @seealso \code{\link{gMAP}}
#'
#' @examples
#' # we consider the example AS MAP analysis
#' example(AS)
#'
#' # default forest plot for a gMAP analysis
#' forest_plot(map_AS)
#'
#' # standard forest plot (only stratified estimate and Mean)
#' forest_plot(map_AS, est=c("Mean"), model="stratified")
#'
#' # to further customize these plots, first load bayesplot and ggplot2
#' library(bayesplot)
#' library(ggplot2)
#'
#' # to make plots with red colors, big fonts for presentations, suppress
#' # the x axis label and add another title (with a subtitle)
#' color_scheme_set("red")
#' theme_set(theme_default(base_size=16))
#' forest_plot(map_AS, size=2) +
#'    yaxis_title(FALSE) +
#'      ggtitle("Ankylosing Spondylitis Forest Plot",
#'              subtitle="Control Group Response Rate")
#'
#' # the defaults are set with
#' color_scheme_set("blue")
#' theme_set(theme_default(base_size=12))
#'
#' @export
forest_plot <- function(x,
prob=0.95,
est = c("both", "MAP", "Mean", "none"),
model = c("stratified", "both", "meta"),
point_est = c("median", "mean"),
size=1.25,
alpha=0.5) {
assert_number(prob, lower=0, upper=1)
assert_that(inherits(x, "gMAP"))
assert_that(x$has_intercept)
est <- match.arg(est)
low <- (1-prob)/2
up <- 1-low
strat <- as.data.frame(x$est_strat(1-prob))
strat <- cbind(strat[1:2], median=strat$mean, strat[3:4])
names(strat)[3:4] <- c("low", "up")
fit <- as.data.frame(fitted(x, type="response", probs=c(0.5, low, up)))
est <- match.arg(est)
model <- match.arg(model)
point_est <- match.arg(point_est)
if(est   == "both") est   <- c("MAP", "Mean")
if(model == "both") model <- c("stratified", "meta")
pred_est <- as.data.frame(do.call(rbind, summary(x, probs=c(0.5, low, up), type="response")[c("theta.pred", "theta")]))
pred_est <- transform(pred_est,  study=c("MAP", "Mean") , model="meta")
pred_est <- pred_est[c("MAP", "Mean") %in% est,]
names(pred_est)[1:5] <- names(strat) <- names(fit) <- c("mean", "sem", "median", "low", "up")
comb <- rbind(if("stratified" %in% model) transform(strat, study=rownames(strat), model="stratified"),
if("meta"       %in% model) transform(fit,   study=rownames(strat), model="meta"),
pred_est
)
comb <- within(comb, { model <- factor(model, levels=c("meta", "stratified"))
study <- factor(study, levels=rev(c(rownames(strat), "Mean", "MAP"))) })
opts <- list(position=position_dodge(width=0.3), size=size)
xlab_str <- switch(x$family$family,
gaussian="Response",
binomial="Response Rate",
poisson="Counting Rate")
graph <- ggplot(comb, aes_string(x="study", y=point_est, ymin="low", ymax="up", linetype="model", color="model"))
if(any(c("MAP", "Mean") %in% est)) {
ref_line <- est[est %in% c("Mean", "MAP")][1]
ref_data <- subset(pred_est, study == ref_line)
no_ref <- sum(est %in% c("Mean", "MAP"))
graph <- graph + geom_rect(ymin=-Inf, ymax=Inf, xmin=0, xmax=no_ref + 0.5,
fill=get_color("l"),
color=get_color("l"), show.legend=FALSE) +
geom_hline(yintercept=ref_data[1,point_est],
color=get_color("mh"),
alpha=alpha,
size=size)
}
graph <- graph +
scale_color_manual("Model", values=get_color(c("mh", "m"))) +
do.call(geom_pointrange, opts) +
ylab(xlab_str) +
scale_linetype_discrete("Model") +
theme(axis.line.y=element_blank(), axis.ticks.y=element_blank()) +
bayesplot::xaxis_title(FALSE) +
coord_flip() +
bayesplot::legend_none()
graph
}
library(assertthat)
forest_plot(map_crohn)
library(assertthat)
use_package("assertthat")
tidy_gMAP <- function(x){
assert_that(inherits(x, "gMAP"))
td <- tibble::tibble()
return(td)
}
tidy_gMAP(map_crohn)
tidy_gMAP(td)
td <- tibble::tibble()
tidy_gMAP(td)
usethis::use_test("tidy_rbest")
tidy_gMAP <- function(x){
assert_that(inherits(x, "gMAP"))
td <- tibble::tibble(
study <- 1,
type <- 1,
estimate <- 1,
lower <- 1,
upper <- 1
)
return(td)
}
tidy_gMAP(td)
tidy_gMAP(map_crohn)
as.dataframe(map_crohn)
as_dataframe(map_crohn)
as.data.frame(map_crohn)
summary(map_crohn)
x <- map_crohn
summary(
x,
probs=c(0.5, low, up),
type="response")
summary(
x,
probs=c(0.5, 0.02, 0.98),
type="response")
x <- map_crohn
summary(
x,
probs=c(0.5, 0.02, 0.98),
type="response")
y <- summary(
x,
probs=c(0.5, 0.02, 0.98),
type="response")
as.data.frame(y)
as.data.frame(do.call(y))
summary(
x,
probs=c(0.5, 0.02, 0.98),
type="response")[
c("theta.pred", "theta")
]
